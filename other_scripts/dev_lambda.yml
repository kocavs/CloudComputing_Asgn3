AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A template to deploy index_photos and search_photos Lambda functions.

Resources:

  IndexPhotosFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://hw3-lambda-funcs/index-photos.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 3
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Policies:
        - Statement:
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - es:*
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:us-east-1:548104857269:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - >-
                  arn:aws:logs:us-east-1:548104857269:log-group:/aws/lambda/index-photos:*
            - Sid: AmazonRekognitionReadOnlyAccess
              Effect: Allow
              Action:
                - rekognition:CompareFaces
                - rekognition:DetectFaces
                - rekognition:DetectLabels
                - rekognition:ListCollections
                - rekognition:ListFaces
                - rekognition:SearchFaces
                - rekognition:SearchFacesByImage
                - rekognition:DetectText
                - rekognition:GetCelebrityInfo
                - rekognition:RecognizeCelebrities
                - rekognition:DetectModerationLabels
                - rekognition:GetLabelDetection
                - rekognition:GetFaceDetection
                - rekognition:GetContentModeration
                - rekognition:GetPersonTracking
                - rekognition:GetCelebrityRecognition
                - rekognition:GetFaceSearch
                - rekognition:GetTextDetection
                - rekognition:GetSegmentDetection
                - rekognition:DescribeStreamProcessor
                - rekognition:ListStreamProcessors
                - rekognition:DescribeProjects
                - rekognition:DescribeProjectVersions
                - rekognition:DetectCustomLabels
                - rekognition:DetectProtectiveEquipment
                - rekognition:ListTagsForResource
                - rekognition:ListDatasetEntries
                - rekognition:ListDatasetLabels
                - rekognition:DescribeDataset
                - rekognition:ListProjectPolicies
                - rekognition:ListUsers
                - rekognition:SearchUsers
                - rekognition:SearchUsersByImage
                - rekognition:GetMediaAnalysisJob
                - rekognition:ListMediaAnalysisJobs
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:Get*
                - s3:List*
                - s3:Describe*
                - s3-object-lambda:Get*
                - s3-object-lambda:List*
              Resource: '*'
        # Add appropriate policies for index_photos
      Events:
        BucketEvent:
          Type: S3
          Properties:
            Bucket: !Ref PhotosBucket
            Events: s3:ObjectCreated:*

  SearchPhotosFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://hw3-lambda-funcs/search-photos.zip
      Handler: lambda_function.lambda_handler
      Runtime: python3.11
      MemorySize: 128
      Timeout: 3
      Architectures:
        - x86_64
      EphemeralStorage:
        Size: 512
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:us-east-1:548104857269:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource:
                - >-
                  arn:aws:logs:us-east-1:548104857269:log-group:/aws/lambda/search-photos:*
            - Effect: Allow
              Action:
                - lex:PostContent
                - lex:PostText
                - lex:PutSession
                - lex:GetSession
                - lex:DeleteSession
                - lex:RecognizeText
                - lex:RecognizeUtterance
                - lex:StartConversation
              Resource: '*'
        # Add appropriate policies for search_photos
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /search
            Method: GET

  PhotosBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PhotosBucket
      PolicyDocument:
        Statement:
          - Action: "s3:*"
            Effect: Deny
            Principal: "*"
            Resource:
              - !Sub "arn:aws:s3:::${PhotosBucket}/*"
              - !Sub "arn:aws:s3:::${PhotosBucket}"
            Condition:
              Bool:
                aws:SecureTransport: false
